{"version":3,"file":"static/js/170.fe49a14f.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.scss?6b75","components/ContactForm/ContactForm.jsx","components/ContactFilter/ContactFilter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.scss?e1a7","components/ContactList/ContactList.jsx","pages/HomePage/homePage.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"contact_div\":\"ContactForm_contact_div__zzP5B\",\"container\":\"ContactForm_container__t5zYM\",\"cta-form\":\"ContactForm_cta-form__PhW4-\",\"form\":\"ContactForm_form__zqkUM\",\"form__input\":\"ContactForm_form__input__xCYsn\",\"form__label\":\"ContactForm_form__label__MOlzG\",\"button_56\":\"ContactForm_button_56__y1pO1\",\"filter_container\":\"ContactForm_filter_container__uCRNw\"};","import PropTypes from 'prop-types';\n\nimport css from './ContactForm.module.scss';\n\nconst ContactForm = ({ onAddContact }) => {\n  const onSubmitForm = event => {\n    event.preventDefault();\n    const name = event.target.name.value;\n    const number = event.target.number.value;\n    if (number === '') {\n      alert('Please enter number');\n      return;\n    }\n    onAddContact({ name, number });\n  };\n  return (\n    <>\n      <form className={css.form} onSubmit={onSubmitForm}>\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          className={css.form__input}\n          // pattern=\"^[a\\-zA\\-Zа\\-яА-Я]+((['\\-][a\\-zA\\-Zа\\-яА\\-Я ])?[a\\-zA\\-Zа\\-яА\\-Я]*)*$\"\n          id=\"name\"\n          name=\"name\"\n          required\n        />\n        <label htmlFor=\"name\" className={css.form__label}>\n          Name:\n        </label>\n\n        <input\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Number\"\n          className={css.form__input}\n          id=\"email\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          // pattern=\"^\\+?\\d{1,4}[#\\-.\\s]?\\(?\\d{1,3}\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}$\"\n        />\n        <label htmlFor=\"email\" className={css.form__label}>\n          Number\n        </label>\n\n        <button type=\"submit\" className={css.button_56}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport css from '../ContactForm/ContactForm.module.scss';\nimport PropTypes from 'prop-types';\nconst ContactFilter = ({ filter, onChangeFilter }) => {\n  return (\n    <div className={css.filter_container}>\n      <input\n        type=\"text\"\n        placeholder=\"filter\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        className={css.form__input}\n        id=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChangeFilter}\n        required\n      />\n      <label\n        htmlFor=\"filter\"\n        className={`${css.form__label} ${css.filter_label}`}\n      >\n        Filter:\n      </label>\n    </div>\n  );\n};\nContactFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\nexport default ContactFilter;\n","// extracted by mini-css-extract-plugin\nexport default {\"button_30\":\"ContactList_button_30__aZwSA\",\"contact_list\":\"ContactList_contact_list__PIJB2\",\"contact__item\":\"ContactList_contact__item__UxRSN\"};","import React from 'react';\nimport css from './ContactList.module.scss';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <>\n      <ul className={css.contact_list}>\n        {contacts.map(contact => {\n          return (\n            <li key={nanoid()} className={css.contact__item}>\n              {contact.name}: {contact.number}\n              <button\n                onClick={() => onDeleteContact(contact.id)}\n                className={css.button_30}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { nanoid } from 'nanoid';\nimport { useEffect } from 'react';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n  updateFilter,\n} from 'Store/contactSlice';\nimport {\n  addContact,\n  deleteContactbyId,\n  getContacts,\n} from 'Store/contactSliceOperations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactFilter from 'components/ContactFilter/ContactFilter';\nimport ContactList from 'components/ContactList/ContactList';\nimport css from '../../components/ContactForm/ContactForm.module.scss';\n\nfunction filterByString(field, filterValue) {\n  return field.toLowerCase().trim().includes(filterValue.toLowerCase().trim());\n}\n\nconst HomePage = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContactbyId(contactId));\n  };\n\n  const onAddContact = ({ name, number }) => {\n    if (\n      contacts.some(\n        contact =>\n          contact.name.toLowerCase() === name.toLowerCase() ||\n          contact.number.toLowerCase() === number.toLowerCase()\n      )\n    ) {\n      alert(`${name} or entered number is already in contacts.`);\n      return;\n    }\n\n    dispatch(addContact({ name, number, id: nanoid() }));\n  };\n\n  const onChangeFilter = ({ target: { value } }) => {\n    dispatch(updateFilter(value.toString()));\n  };\n\n  const filteredContacts = contacts.filter(\n    contact =>\n      filterByString(contact.name, filter) ||\n      filterByString(contact.number, filter)\n  );\n\n  return (\n    <div className={css.contact_div}>\n      {error && <p>error</p>}\n      {isLoading && <p>Loading...</p>}\n      <h1>Phonebook</h1>\n      <ContactForm onAddContact={onAddContact} />\n\n      <h2>Contacts</h2>\n\n      <ContactFilter filter={filter} onChangeFilter={onChangeFilter} />\n\n      <ContactList\n        contacts={filteredContacts}\n        onDeleteContact={onDeleteContact}\n      />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","onAddContact","className","css","onSubmit","event","preventDefault","name","target","value","number","alert","type","placeholder","title","required","htmlFor","filter","onChangeFilter","onChange","contacts","onDeleteContact","map","contact","onClick","filterByString","field","filterValue","toLowerCase","trim","includes","dispatch","useDispatch","useSelector","selectFilter","selectContacts","isLoading","selectIsLoading","error","selectError","useEffect","getContacts","filteredContacts","some","addContact","updateFilter","contactId","deleteContactbyId"],"sourceRoot":""}